//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Src/Inputs/InputActions/MouseControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Suburb.Inputs
{
    public partial class @MouseControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MouseControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MouseControls"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""2925a955-3c52-4183-b888-1f8a6c39dd91"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""40f8a702-3b0b-4176-9118-f89e15bf5838"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DownLeft"",
                    ""type"": ""Button"",
                    ""id"": ""838a9734-0a2f-4657-98cd-e785088c6730"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownRight"",
                    ""type"": ""Button"",
                    ""id"": ""d283b3d4-7d03-4576-bf67-8325e0e4d4d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownMiddle"",
                    ""type"": ""Button"",
                    ""id"": ""b33c0c39-ac85-4af7-b76d-1ba14a09e205"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c342221a-882d-4fbd-97fe-cebf092118c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpRight"",
                    ""type"": ""Button"",
                    ""id"": ""bdbbd84c-451b-4904-af29-4ca04a3dabf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpMiddle"",
                    ""type"": ""Button"",
                    ""id"": ""88a5bbcb-6691-426e-a1da-7ed665d7eb8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Id"",
                    ""type"": ""Value"",
                    ""id"": ""39c4196e-4602-4f51-9476-676e20275e7b"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Delta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fd1a4bbd-a9ea-442e-b5e7-0541eb8f4731"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""01f8ce69-e73b-4ae5-b256-47ec7980f2a9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c89d810-db90-42c2-b3cf-e4fea37cd438"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""389d8639-971d-42df-b88d-2389bd4ed50e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""DownLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b3ef73a-5203-4a35-a36b-4c534ee1f82b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""UpLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b064bd87-4e3d-4fa8-b61d-0e110ba35b7d"",
                    ""path"": ""<Mouse>/pointerId"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Id"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fa18843-1ece-46b2-afa1-163e77647f22"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5c6a749-ba81-402f-abfc-7e79c610e4f6"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""840d9c84-7b63-4604-88ff-ca9a9a15076f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""DownRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0a5a66e-5ea3-476c-924c-e6ad91156207"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""UpRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55155f21-95ba-4915-9ec2-600be95d736c"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""DownMiddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19d3ea2f-6f34-49c2-a16f-042a523dfed7"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""UpMiddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Mouse
            m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
            m_Mouse_Position = m_Mouse.FindAction("Position", throwIfNotFound: true);
            m_Mouse_DownLeft = m_Mouse.FindAction("DownLeft", throwIfNotFound: true);
            m_Mouse_DownRight = m_Mouse.FindAction("DownRight", throwIfNotFound: true);
            m_Mouse_DownMiddle = m_Mouse.FindAction("DownMiddle", throwIfNotFound: true);
            m_Mouse_UpLeft = m_Mouse.FindAction("UpLeft", throwIfNotFound: true);
            m_Mouse_UpRight = m_Mouse.FindAction("UpRight", throwIfNotFound: true);
            m_Mouse_UpMiddle = m_Mouse.FindAction("UpMiddle", throwIfNotFound: true);
            m_Mouse_Id = m_Mouse.FindAction("Id", throwIfNotFound: true);
            m_Mouse_Delta = m_Mouse.FindAction("Delta", throwIfNotFound: true);
            m_Mouse_Zoom = m_Mouse.FindAction("Zoom", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Mouse
        private readonly InputActionMap m_Mouse;
        private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
        private readonly InputAction m_Mouse_Position;
        private readonly InputAction m_Mouse_DownLeft;
        private readonly InputAction m_Mouse_DownRight;
        private readonly InputAction m_Mouse_DownMiddle;
        private readonly InputAction m_Mouse_UpLeft;
        private readonly InputAction m_Mouse_UpRight;
        private readonly InputAction m_Mouse_UpMiddle;
        private readonly InputAction m_Mouse_Id;
        private readonly InputAction m_Mouse_Delta;
        private readonly InputAction m_Mouse_Zoom;
        public struct MouseActions
        {
            private @MouseControls m_Wrapper;
            public MouseActions(@MouseControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_Mouse_Position;
            public InputAction @DownLeft => m_Wrapper.m_Mouse_DownLeft;
            public InputAction @DownRight => m_Wrapper.m_Mouse_DownRight;
            public InputAction @DownMiddle => m_Wrapper.m_Mouse_DownMiddle;
            public InputAction @UpLeft => m_Wrapper.m_Mouse_UpLeft;
            public InputAction @UpRight => m_Wrapper.m_Mouse_UpRight;
            public InputAction @UpMiddle => m_Wrapper.m_Mouse_UpMiddle;
            public InputAction @Id => m_Wrapper.m_Mouse_Id;
            public InputAction @Delta => m_Wrapper.m_Mouse_Delta;
            public InputAction @Zoom => m_Wrapper.m_Mouse_Zoom;
            public InputActionMap Get() { return m_Wrapper.m_Mouse; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
            public void AddCallbacks(IMouseActions instance)
            {
                if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @DownLeft.started += instance.OnDownLeft;
                @DownLeft.performed += instance.OnDownLeft;
                @DownLeft.canceled += instance.OnDownLeft;
                @DownRight.started += instance.OnDownRight;
                @DownRight.performed += instance.OnDownRight;
                @DownRight.canceled += instance.OnDownRight;
                @DownMiddle.started += instance.OnDownMiddle;
                @DownMiddle.performed += instance.OnDownMiddle;
                @DownMiddle.canceled += instance.OnDownMiddle;
                @UpLeft.started += instance.OnUpLeft;
                @UpLeft.performed += instance.OnUpLeft;
                @UpLeft.canceled += instance.OnUpLeft;
                @UpRight.started += instance.OnUpRight;
                @UpRight.performed += instance.OnUpRight;
                @UpRight.canceled += instance.OnUpRight;
                @UpMiddle.started += instance.OnUpMiddle;
                @UpMiddle.performed += instance.OnUpMiddle;
                @UpMiddle.canceled += instance.OnUpMiddle;
                @Id.started += instance.OnId;
                @Id.performed += instance.OnId;
                @Id.canceled += instance.OnId;
                @Delta.started += instance.OnDelta;
                @Delta.performed += instance.OnDelta;
                @Delta.canceled += instance.OnDelta;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }

            private void UnregisterCallbacks(IMouseActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @DownLeft.started -= instance.OnDownLeft;
                @DownLeft.performed -= instance.OnDownLeft;
                @DownLeft.canceled -= instance.OnDownLeft;
                @DownRight.started -= instance.OnDownRight;
                @DownRight.performed -= instance.OnDownRight;
                @DownRight.canceled -= instance.OnDownRight;
                @DownMiddle.started -= instance.OnDownMiddle;
                @DownMiddle.performed -= instance.OnDownMiddle;
                @DownMiddle.canceled -= instance.OnDownMiddle;
                @UpLeft.started -= instance.OnUpLeft;
                @UpLeft.performed -= instance.OnUpLeft;
                @UpLeft.canceled -= instance.OnUpLeft;
                @UpRight.started -= instance.OnUpRight;
                @UpRight.performed -= instance.OnUpRight;
                @UpRight.canceled -= instance.OnUpRight;
                @UpMiddle.started -= instance.OnUpMiddle;
                @UpMiddle.performed -= instance.OnUpMiddle;
                @UpMiddle.canceled -= instance.OnUpMiddle;
                @Id.started -= instance.OnId;
                @Id.performed -= instance.OnId;
                @Id.canceled -= instance.OnId;
                @Delta.started -= instance.OnDelta;
                @Delta.performed -= instance.OnDelta;
                @Delta.canceled -= instance.OnDelta;
                @Zoom.started -= instance.OnZoom;
                @Zoom.performed -= instance.OnZoom;
                @Zoom.canceled -= instance.OnZoom;
            }

            public void RemoveCallbacks(IMouseActions instance)
            {
                if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMouseActions instance)
            {
                foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MouseActions @Mouse => new MouseActions(this);
        private int m_MouseSchemeIndex = -1;
        public InputControlScheme MouseScheme
        {
            get
            {
                if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
                return asset.controlSchemes[m_MouseSchemeIndex];
            }
        }
        public interface IMouseActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnDownLeft(InputAction.CallbackContext context);
            void OnDownRight(InputAction.CallbackContext context);
            void OnDownMiddle(InputAction.CallbackContext context);
            void OnUpLeft(InputAction.CallbackContext context);
            void OnUpRight(InputAction.CallbackContext context);
            void OnUpMiddle(InputAction.CallbackContext context);
            void OnId(InputAction.CallbackContext context);
            void OnDelta(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
        }
    }
}
